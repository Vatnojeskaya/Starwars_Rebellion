--[[ REBEL CONSOLE --]]

msg = {
	sys = {0,0.6,0},
	prompt = {255,153/255,0},
}

--hero tables
leadersTeamAdmPos = {
	{4.3, 2, -2.42},
	{4.3, 2, -0.91},
	{4.3, 2, 0.68},
	{4.3, 2, 2.2},
	{2.8, 2, -2.42},
	{2.8, 2, -0.91},
	{2.8, 2, 0.68}
	}

leadersTeamGenPos = {
	{-4.3, 2, -2.42},
	{-4.3, 2, -0.91},
	{-4.3, 2, 0.68},
	{-4.3, 2, 2.2},
	{-2.8, 2, -2.08},
	{-2.8, 2, -0.91},
	{-2.8, 2, 0.68}
	}

leadersSoloPos = {
	{-4.3, 2, -2.42},
	{-4.3, 2, -0.91},
	{-4.3, 2, 0.68},
	{-4.3, 2, 2.2},
	{-2.8, 2, -2.42},
	{-2.8, 2, -0.91},
	{-2.8, 2, 0.68},
	{-2.8, 2, 2.2},
	{-1.3, 2, 2.42}
	}

--tracking variables
factionOrigin = "Rebel"
isRecruiting = false
teamGame = true

--objects
recruitMatsGUID = {'cd8ad7', '1a419e'}
zoneBoardGUID = '817c29'
zoneRebMissionsUnusedGUID = '523477'
recruitMats = {}
recruitCard = {}



circles = {'b6a28a', 'e61cbe', 'a3d793', '6dfd78', '78f62f'}  --He means well, Master yoda, Millennium Falcon, R2-D2, C-3PO
join_circle = false
join_number = 0



--[[INIT --]]
function onload()

	--spawn buttons
	local params = {
		height = 300,
		width = 300,
		font_size = 100,
		color = {1,1,1,0},
		function_owner = self,
		label = ''
	}

	params.click_function = 'fcnProbeButton'
	params.position = {1.065,0.05,-0.6}
	params.tooltip = 'Draw 1 Probe'
	self.createButton(params)

	params.click_function = 'fcnObjectiveButton'
	params.position = {0.08,0.05,-0.6}
	params.tooltip = 'Draw 1 Objective'
	self.createButton(params)

	params.click_function = 'fcnMissionButton'
	params.position = {-0.91,0.05,-0.6}
	params.tooltip = 'Draw 1 Mission'
	self.createButton(params)

	params.click_function = 'fcnClearMissionButton'
	params.position = {-1.5,0.05,0.74}
	params.tooltip = 'Clear Mission Area'
	self.createButton(params)

	params.click_function = 'fcnRecallLeadersButton'
	params.position = {-0.79,0.05,0.74}
	params.tooltip = 'Recall Leaders to Pool'
	self.createButton(params)

	params.click_function = 'fcnDrawRefreshButton'
	params.position = {-0.07,0.05,0.74}
	params.tooltip = 'Draw 2 Missions and 1 Objective'
	self.createButton(params)

	params.click_function = 'fcnRecruitButton'
	params.position = {0.63,0.05,0.74}
	params.tooltip = 'Draw Possible Recruits'
	self.createButton(params)

	params.click_function = 'fcnBuildButton'
	params.position = {1.3,0.05,0.74}
	params.tooltip = 'Report Current Build Counts'
	self.createButton(params)

	isResettingLocal = false
	factionOrigin = "Rebel"

	for i=1,2 do
		recruitMats[i] = getObjectFromGUID(recruitMatsGUID[i])
	end

	zoneBoard = getObjectFromGUID(zoneBoardGUID)
	zoneRebMissionsUnused = getObjectFromGUID(zoneRebMissionsUnusedGUID)

end

function onObjectSpawn(object)

	for k,circle in pairs(circles) do
		if object.getGUID() == circle then
			if join_circle == false then

				params = {
			        click_function = 'joinCircle',
			        function_owner = self,
			        label          = 'Join Circle',
			        position       = {8, 0.101, -7.25},
			        rotation       = {0, 0, 0},
			        width          = 1500,
			        height         = 250,
			        font_size      = 150,
			        color          = {0.5, 0.04, 0},
			        font_color     = {0.85, 0.85, 0.85},
			        tooltip        = "Join figurines to circles.",
			    }
			  self.createButton(params)

				join_circle = true
			end
		end
	end

	local params = {
		function_owner = self,
		rotation       = {0, 0, 0},
		width          = 800,
		height         = 200,
		font_size      = 125,
		color          = {0.5, 0.04, 0},
		font_color     = {0.85, 0.85, 0.85},
	}

  if object.getGUID() == '78f62f' then
	  params.click_function = 'detachC3PO'
	  params.position = {7, 0.101, -6.75}
	  params.label = 'C-3PO'
	  params.tooltip = 'Detach C-3PO'
	  self.createButton(params)
	  join_number = join_number + 1

	elseif object.getGUID() == 'e61cbe' then
		params.click_function = 'detachYoda'
		params.position = {9, 0.101, -6.75}
		params.label = 'M. Yoda'
		params.tooltip = 'Detach Master Yoda'
		self.createButton(params)
		join_number = join_number + 1

	elseif object.getGUID() == 'a3d793' then
		params.click_function = 'detachFalcon'
		params.position = {7, 0.101, -6.25}
		params.label = 'M. Falcon'
		params.tooltip = 'Detach Millennium Falcon'
		self.createButton(params)
		join_number = join_number + 1

	elseif object.getGUID() == '6dfd78' then
		params.click_function = 'detachD2R2'
		params.position = {9, 0.101, -6.25}
		params.label = 'D2-R2'
		params.tooltip = 'Detach R2-D2'
		self.createButton(params)
		join_number = join_number + 1

	elseif object.getGUID() == 'b6a28a' then
		params.click_function = 'detachHeMeansWell'
		params.position = {8, 0.101, -5.75}
		params.label = 'He Means Well'
		params.tooltip = 'Detach He Means Well'
		self.createButton(params)
		join_number = join_number + 1

	end
end


function findHitsInRadius(pos, radius)

    local radius = (radius or 0.4)
    local hit_list = Physics.cast({
        origin       = pos,
        direction    = {0,1,0},
        type         = 3,
        size         = {radius,radius,radius},
        max_distance = 0,
        debug        = false,
    })

		local refined_list = {}

		for key, value in ipairs(hit_list) do
      table.insert(refined_list, value.hit_object)
    end

		return refined_list
end

function joinCircle()

	local objects = zoneBoard.getObjects()
	for k, object in pairs(objects) do
		for k, circle in pairs(circles) do
		  if object.getGUID() == circle then
				local circle_pos = object.getPosition()
				local hit_circle = findHitsInRadius(circle_pos)
				for k, object_hit in pairs(hit_circle) do
					local type = object_hit.tag
					if type == 'Figurine' then
						object_hit.addAttachment(object)
					end
				end
			end
		end
	end
end


function detachCircle(p_guid)

	local guid = p_guid
	local objects = {}
	objects = zoneBoard.getObjects()

	for k,object in pairs(objects) do
		local info = object.getAttachments()
		if info[1] ~= nil then
			--log(info[1], 'info')
			if info[1].guid == guid then
				object.removeAttachments()
			end
		end
	end
end

function detachC3PO()
	detachCircle('78f62f')
end

function detachYoda()
	detachCircle('e61cbe')
end

function detachFalcon()
	detachCircle('a3d793')
end

function detachD2R2()
	detachCircle('6dfd78')
end

function detachHeMeansWell()
	detachCircle('b6a28a')
end

function onObjectEnterContainer(p_container, p_object)

	local datapad = getObjectFromGUID('392157')
	--log(join_number,'join_number')

	if p_container.getGUID() == 'c1d20c' then
		for k, circle in pairs(circles) do
			if p_object.getGUID() == circle then
				local index_button = datapad.getButtons()
				--log(index_button,'index_button')
				for k, value in pairs(index_button)	do
					if value.click_function == 'detachC3PO' and p_object.getGUID() == '78f62f' then
						local index_value = value.index
						datapad.removeButton(index_value)
						join_number = join_number - 1
						--log(join_number,'j_n_1')
					elseif value.click_function == 'detachYoda' and p_object.getGUID() == 'e61cbe' then
						local index_value = value.index
						datapad.removeButton(index_value)
						join_number = join_number - 1
						--log(join_number,'j_n_2')
					elseif value.click_function == 'detachFalcon' and p_object.getGUID() == 'a3d793' then
						local index_value = value.index
						datapad.removeButton(index_value)
						join_number = join_number - 1
						--log(join_number,'j_n_3')
					elseif value.click_function == 'detachD2R2' and p_object.getGUID() == '6dfd78' then
						local index_value = value.index
						datapad.removeButton(index_value)
						join_number = join_number - 1
					elseif value.click_function == 'detachHeMeansWell' and p_object.getGUID() == 'b6a28a' then
						local index_value = value.index
						datapad.removeButton(index_value)
						join_number = join_number - 1
					end
				end
			end
		end

	end

	if join_number == 0 then
		local index_button = datapad.getButtons()
		for k, value in pairs(index_button)	do
			if value.click_function == 'joinCircle' then
				local index_value = value.index
				datapad.removeButton(index_value)
				join_circle = false
			end
		end
	end

end



--[[ UTILITY FUNCTIONS --]]


--[[ BUTTON FUNCTIONS functions to ID which deck type for drawing since there's no damn argument reported from a button other than clicked object and player--]]

function fcnProbeButton(clickedObj, playerColor)
	local drawDeck = "deckProbe"
	local buttonParams = {drawDeck, playerColor, clickedObj}
	Global.call('drawOneCard', buttonParams)
end

function fcnObjectiveButton(clickedObj, playerColor)
	local drawDeck = "deckRebelObjective"
	local buttonParams = {drawDeck, playerColor, clickedObj}
	Global.call("drawOneCard", buttonParams)
end

function fcnMissionButton(clickedObj, playerColor)
	local drawDeck = "deckRebelMission"
	local buttonParams = {drawDeck, playerColor, clickedObj}
	Global.call("drawOneCard", buttonParams)
end

function fcnActionButton(clickedObj, playerColor)
	local drawDeck = "deckRebelAction"
	local buttonParams = {drawDeck, playerColor, clickedObj}
	Global.call("drawOneCard", buttonParams)
end


function fcnBuildButton(clickedObj, playerColor)
	local reportType = "Public"
	local buttonParams = {clickedObj, reportType}
	Global.call("updateSystemTable", buttonParams)
end

function fcnPrivateBuildButton(clickedObj, playerColor)
	local reportType = "Private"
	local buttonParams = {clickedObj, reportType}
	Global.call("updateSystemTable", buttonParams)
end


--[[Local Functions --]]

function fcnClearMissionButton(clickedObj, playerColor)
	local objects = {}
	local projectsDiscard = {}
	local missionsDiscard = {}
	local cardsToHand = {}
	objects = zoneRebMissionsUnused.getObjects()
	local type = {}
	local objectGUID = {}
	local card = {}
	local description = {}
	for index, object in pairs(objects) do
		type = object.tag
		if string.find(type, 'Card') then
			objectGUID = object.getGUID()
			card = getObjectFromGUID(objectGUID)
			if card.getRotation().z >= 90 and card.getRotation().z <= 270 then
				table.insert(cardsToHand, card)
			elseif card.getRotation().z <= 90 or card.getRotation().z >= 270 then
				description = object.getDescription()
				if string.find(description, 'Project') then
					table.insert(projectsDiscard, card)
				elseif string.find(description, 'Return to Hand') then
					table.insert(cardsToHand, card)
				elseif string.find(description, 'Mission') then
					table.insert(missionsDiscard, card)
				end
			end
		end
	end
	deckTable = Global.getTable("cardDeckTable")
	if cardsToHand ~= nil or #cardsToHand > 0 then
		for i=1,#cardsToHand do
			local params = {}
			local destinationGUID = '58b8ad'
			local destination = getObjectFromGUID(destinationGUID)
			params.position = destination.getPosition()
			params.rotation = {0,0,0}
			cardsToHand[i].setPosition(params.position)
			cardsToHand[i].setRotation(params.rotation)
		end
	end
	if missionsDiscard ~= nil or #missionsDiscard > 0 then
		for i=1,#missionsDiscard do
			local params = {}
			local destinationGUID = deckTable.deckRebelMission.deckDiscardZone_Guid
			local destination = getObjectFromGUID(destinationGUID)
			params.position = {destination.getPosition().x, destination.getPosition().y + i+3, destination.getPosition().z}
			--params.rotation = {0,0,0}
			missionsDiscard[i].setPositionSmooth(params.position)
			--missionsDiscard[i].setRotation(params.rotation)
		end
	end
	printToAll("Rebel mission area has been cleared.", msg.sys)
end

function fcnRecallLeadersButton(clickedObj, playerColor)
	local objects = {}
	objects = zoneBoard.getObjects()
	local leadersAdmirals = {}
	local leadersGenerals = {}
	local leadersAll = {}
	teamGame = Global.getVar("teamGame")
	for index,object in pairs(objects) do
		local type = object.tag
		if string.find(type, 'Figurine') then
			local description = object.getDescription()
			local objectGUID = object.getGUID()
			local leader = getObjectFromGUID(objectGUID)
			if string.find(description, 'Rebel Admiral') then
				table.insert(leadersAdmirals, leader)
			elseif string.find(description, 'Rebel General') then
				table.insert(leadersGenerals, leader)
			end
		end
	end
	if teamGame == true then
		if leadersAdmirals ~= nil or #leadersAdmirals > 0 then
			for i=1,#leadersAdmirals do
				local params = {}
				local pos = {0,1.05,18.48}
				params.position = {pos[1] + leadersTeamAdmPos[i][1], pos[2] + leadersTeamAdmPos[i][2], pos[3] + leadersTeamAdmPos[i][3]}
				params.rotation = {0,0,0}
				leadersAdmirals[i].setPositionSmooth(params.position)
				leadersAdmirals[i].setRotationSmooth(params.rotation)
			end
		end
		if leadersGenerals ~= nil or #leadersGenerals > 0 then
			for i=1,#leadersGenerals do
				local params = {}
				local pos = {0,1.05,18.48}
				params.position = {pos[1] + leadersTeamGenPos[i][1], pos[2] + leadersTeamGenPos[i][2], pos[3] + leadersTeamGenPos[i][3]}
				params.rotation = {0,0,0}
				leadersGenerals[i].setPositionSmooth(params.position)
				leadersGenerals[i].setRotationSmooth(params.rotation)
			end
		end
	else
		local leaderCount = #leadersAdmirals + #leadersGenerals
		for i=1,leaderCount do
			local params = {}
			local pos = {0,1.05,18.48}
			params.position = {pos[1] + leadersSoloPos[i][1], pos[2] + leadersSoloPos[i][2], pos[3] + leadersSoloPos[i][3]}
			params.rotation = {0,0,0}
			if leadersAdmirals[i] ~= nil then
				leadersAdmirals[i].setPositionSmooth(params.position)
				leadersAdmirals[i].setRotationSmooth(params.rotation)
			else
				local adjustedI = i - #leadersAdmirals
				leadersGenerals[adjustedI].setPositionSmooth(params.position)
				leadersGenerals[adjustedI].setRotationSmooth(params.rotation)
			end
		end
	end
	printToAll("Rebel Leaders have been recalled.", msg.sys)
end


function fcnDrawRefreshButton(clickedObj, playerColor)
	--initial hand count
	local count = 0
	local initialHand = Player["White"].getHandObjects()
		for k, v in pairs(initialHand) do
			count = count + 1
		end
	local initialCardCount = count
	--2 mission
	fcnMissionButton(clickedObj, playerColor)
	fcnMissionButton(clickedObj, playerColor)
	--2 probe
	fcnObjectiveButton(clickedObj, playerColor)
	--check hand
	local finalCount = initialCardCount + 2
	if finalCount > 10 then
		local discard = 0
		local discard = finalCount - 10
		printToAll("Rebel General has too many cards in Mission Hand! " .. finalCount .. " Cards in hand." .. " Discard " .. discard .. " cards from hand.", msg.prompt )
	end
end

function fcnRecruitButton(clickedObj, playerColor)
	if isRecruiting == false then
		local playerName = Player[playerColor].steam_name
		deckTable = Global.getTable("cardDeckTable")
		local zoneGUID = deckTable.deckRebelAction.deckZone_Guid
		actionDeckZone = getObjectFromGUID(zoneGUID)
		local fcnParams = {actionDeckZone, "deckRebelAction"}
		local params = {}
		for i = 1,2 do
			local deck = Global.call("findPile", fcnParams)
			if(deck) then
				deckTable = Global.getTable("cardDeckTable")
				params.position = {recruitMats[i].getPosition().x+0.06, recruitMats[i].getPosition().y+1, recruitMats[i].getPosition().z - 0.06}
				params.rotation = {0,0,180}
				local card = {}
				if deckTable.deckRebelAction.lastCard == false then
					local card = deck.takeObject( params )
					recruitCard[i] = card
				else
					local card = deck
					card.setPositionSmooth ( params.position)
					card.setRotationSmooth ( params.rotation)
					recruitCard[i] = card
				end
				printToAll("Rebel " .. playerName .. " draws 1 Action card for recruitment.", msg.sys)
				isRecruiting = true
			else
				recruitCard[i] = nil
				printToAll("Rebel Action deck is depleted.", msg.sys)
			end
		end
		printToAll("Rebel Admiral, choose Action card for recruitment.", msg.sys)
	else
		printToAll("Rebel Recruiting process has already been triggered. Use Recruit buttons on the recruting mats.", msg.prompt )
	end
end

function recruit(clickedObj, playerColor)
	local leaderName = {}
	if isRecruiting == true then
		for i=1,2 do
			if recruitCard[i] ~= nil then
				if clickedObj == recruitMats[i] then
					local card = recruitCard[i]
					deckTable = Global.getTable("cardDeckTable")
					local handGUID = deckTable.deckRebelAction.destinationHand_Guid
					local hand = getObjectFromGUID(handGUID)
					local params = hand.getPosition()
					card.setPositionSmooth (params)
					local playerName = Player[playerColor].steam_name
					leaderName = card.getName()
					printToAll("Rebel " .. playerName .. " has chosen an Action card.", msg.sys )
				else
					local fcnParams = {actionDeckZone, "deckRebelAction"}
					local params = {}
					local deck = Global.call("findPile", fcnParams)
					if (deck) then
						params.position = deck.getPosition()
						params.rotation = deck.getRotation()
						local deckParams = {params.position.x, params.position.y + 3, params.position.z}
						deck.setPositionSmooth( deckParams )
						recruitCard[i].setPositionSmooth( params.position )
						recruitCard[i].setRotation( params.rotation )
					else
						params.position = actionDeckZone.getPosition()
						recruitCard[i].flip()
					end

				end
				recruitCard[i] = {}
			else
				printToAll("No Rebel Leader to recruit.", {1, 0, 0} )
			end
		end
		isRecruiting = false
	else
		printToAll("Rebel Recruiting process has not been triggered.", {1, 0, 0} )
	end
	--WIP get leader from bag and place in pool
end


--[[WIP functions, inactive




function fcnAdvanceTurnButton(clickedObj, playerColor)
end


function fcnPrivateBuildQueueButton(clickedObj, playerColor)
end
--]]